{"version":3,"file":"angular-extended-http-client.js.map","sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface IObservableBase {\n    \n}\n\nexport interface IObservable<T> extends IObservableBase {\n    (subscribe: ISubscribe<T>) : void;    \n}\n\nexport interface IObservableError extends IObservableBase {\n    (error: ISubscribeError) : void;\n}\n\nexport interface IObservableCustomError<TError> extends IObservableBase {\n    (error: ISubscribeCustomError<TError>) : void;\n}\n\nexport interface ISubscribeBase {\n    ok: boolean;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;    \n}\n\nexport interface ISubscribe<T> extends ISubscribeBase {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n}\n\nexport class Subscribe<T> implements ISubscribe<T> {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeError extends ISubscribeBase {\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\n  error: TError;\n  message: string;\n  status: number;\n  statusText: string;\n}\n\nexport class SubscribeError implements ISubscribeError {\n    ok: boolean;\n    headers: HttpHeaders;\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\n  ok: boolean;\n  error: TError;\n  headers: HttpHeaders;\n  message: string;\n  status: number;\n  statusText: string;\n}\n\nexport interface IHttpClientExtended {\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>>;\n    \n    getUsingCustomError<T, TError>(url: string, success?: IObservable<T>, failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<T>>;\n\n    post<TRequest, TResponse>(url: string, model: TRequest, \n                              success?: IObservable<TResponse>, \n                              failure?: IObservableError, options?: any) : Observable<HttpResponse<TResponse>>;\n\n    postUsingCustomError<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                        success?: IObservable<TResponse>, \n                                                        failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>>;                              \n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientExt implements IHttpClientExtended {\n\n  constructor(private client: HttpClient)\n  {\n  }\n\n  get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>> {                \n      let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n      if (success != null) {\n          httpResponse\n              .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure));\n      }        \n\n      return httpResponse;                   \n  }\n\n  getUsingCustomError<T, TError>(url: string, success?: IObservable<T>, failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<T>> {\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n      if (success != null) {\n          httpResponse\n              .subscribe(x => this.processSuccessResponse(x,success), error => this.processCustomErrorResponse(<TError>error, failure));\n      }        \n\n      return httpResponse;                   \n  }\n\n\n  post<TRequest, TResponse>(url: string, model: TRequest, \n                              success?: IObservable<TResponse>, \n                              failure?: IObservableError, options?: any) : Observable<HttpResponse<TResponse>> {                \n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                { headers: options.headers, observe: 'response' } \n                                                                : {observe: 'response'})\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure));\n    }        \n\n    return httpResponse;                   \n  }\n\n  postUsingCustomError<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                      success?: IObservable<TResponse>, \n                                                      failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>> {                \n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                { headers: options.headers, observe: 'response' } \n                                                                : {observe: 'response'})\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processCustomErrorResponse(<TError>error, failure));\n    }        \n\n    return httpResponse;                   \n  }  \n\n  private processSuccessResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservable<TResponse>) : void {\n\n    if (success != null) {\n      if (response.ok) {\n        let subscribe: Subscribe<TResponse> = new Subscribe<TResponse>();\n        subscribe.ok = response.ok;\n        subscribe.status = response.status;\n        subscribe.statusText = response.statusText;\n        subscribe.body = response.body;                        \n        subscribe.headers = response.headers;\n                \n        success(subscribe);                            \n      }                        \n    }      \n  }\n\n  private processErrorResponse(error: any, failure: IObservableError) : void {\n\n    if (failure != null) {\n      let subscribe: SubscribeError = new SubscribeError();\n      subscribe.ok = false;\n      subscribe.headers = error.headers;\n      subscribe.message = error.message;\n      subscribe.status = error.status;\n      subscribe.statusText = error.statusText;\n\n      failure(subscribe);\n    }      \n  }\n\n  private processCustomErrorResponse<TError>(error: any, failure: IObservableCustomError<TError>) : void {\n\n    if (failure != null) {\n      debugger;\n      let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\n      subscribe.ok = false;\n      if (error.error) {\n        subscribe.error = error.error;\n      }        \n      subscribe.headers = error.headers;\n      subscribe.message = error.message;\n      subscribe.status = error.status;\n      subscribe.statusText = error.statusText;\n\n      failure(subscribe);\n    }      \n  }  \n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"],"names":[],"mappings":"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"}
