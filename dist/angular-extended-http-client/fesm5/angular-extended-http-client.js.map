{"version":3,"file":"angular-extended-http-client.js.map","sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the model from the body of the API response\r\n*/\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response.\r\n*/\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n  (subscribe: ISubscribeBase) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response and the model from the body of the API response\r\n*/\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\n/* \r\nFailure callback - returns the API thrown custom exception\r\n*/\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response through interface ISubscribeError\r\n*/\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n  (error: ISubscribeError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response and the API throw custom exception through interface ISubscribeCustomError<TError>\r\n*/\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class SubscribeBase implements ISubscribeBase {\r\n  ok: boolean;\r\n  headers: HttpHeaders;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ResponseType {\r\n  IObservable,\r\n  IObservableHttpResponse,\r\n  IObservableHttpCustomResponse\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableHttpError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest, \r\n                              responseType?: ResponseType,\r\n                              success?: IObservableBase, \r\n                              failureType?: ErrorType,\r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.get<TResponse>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse.pipe();                   \r\n  }\r\n\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest,\r\n                              responseType?: ResponseType, \r\n                              success?: IObservableBase,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.put<T>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n  \r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.delete<TResponse>(url, options != null ? \r\n                                                  { headers: options.headers, observe: 'response' } \r\n                                                  : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  private processSuccessResponse<TResponse>(responseType: ResponseType, response: HttpResponse<TResponse>, success: IObservableBase) : void {\r\n\r\n    if (response.ok) {\r\n      switch(responseType) {        \r\n        case ResponseType.IObservable:\r\n          let iObservable = <IObservable<TResponse>>success;\r\n          iObservable(response!.body);\r\n          break;\r\n        case ResponseType.IObservableHttpResponse:\r\n          let iObservableHttpResponse = <IObservableHttpResponse>success;\r\n          let subscribe1: ISubscribeBase = new SubscribeBase();\r\n          subscribe1.ok = response.ok;\r\n          subscribe1.status = response.status;\r\n          subscribe1.statusText = response.statusText;\r\n          subscribe1.headers = response.headers;\r\n                  \r\n          iObservableHttpResponse(subscribe1);                            \r\n          break;\r\n        case ResponseType.IObservableHttpCustomResponse:\r\n          let iObservableHttpCustomResponse = <IObservableHttpCustomResponse<TResponse>>success;\r\n          let subscribe2: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n          subscribe2.ok = response.ok;\r\n          subscribe2.status = response.status;\r\n          subscribe2.statusText = response.statusText;\r\n          subscribe2.body = response.body;                        \r\n          subscribe2.headers = response.headers;\r\n                  \r\n          iObservableHttpCustomResponse(subscribe2);                            \r\n          break;\r\n      }\r\n    }    \r\n  }\r\n\r\n  private processSuccessHttpResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpResponse) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processSuccessHttpCustomResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpCustomResponse<TResponse>) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        let subscribe: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n        subscribe.ok = response.ok;\r\n        subscribe.status = response.status;\r\n        subscribe.statusText = response.statusText;\r\n        subscribe.body = response.body;                        \r\n        subscribe.headers = response.headers;\r\n                \r\n        success(subscribe);                            \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure: IObservableErrorBase, errorType: ErrorType) : void {\r\n\r\n    switch(errorType)\r\n    {\r\n      case ErrorType.IObservableError:\r\n        let observableError = <IObservableError<TError>> failure;\r\n        observableError(error!.error);        \r\n        break;\r\n      case ErrorType.IObservableHttpError:\r\n        let observableHttpError = <IObservableHttpError> failure;\r\n        let subscribe1: SubscribeError = new SubscribeError();\r\n        subscribe1.ok = false;\r\n        subscribe1.headers = error.headers;\r\n        subscribe1.message = error.message;\r\n        subscribe1.status = error.status;\r\n        subscribe1.statusText = error.statusText;\r\n\r\n        observableHttpError(subscribe1);\r\n        break;\r\n      case ErrorType.IObservableHttpCustomError:\r\n        let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n        let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n        subscribe.ok = false;\r\n        if (error.error) {\r\n          subscribe.error = error.error;\r\n        }        \r\n        subscribe.headers = error.headers;\r\n        subscribe.message = error.message;\r\n        subscribe.status = error.status;\r\n        subscribe.statusText = error.statusText;\r\n\r\n        observableHttpCustomError(subscribe);\r\n        break;\r\n      default:        \r\n        break;\r\n    }\r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"],"names":[],"mappings":"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"}
