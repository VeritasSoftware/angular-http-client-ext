{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["Subscribe","SubscribeError","HttpClientExt","client","this","prototype","get","url","success","failure","options","httpResponse","headers","observe","subscribe","x","ok","status","statusText","body","error","message","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"gXA6BA,MAAA,SAAAA,QAcA,SAAAC,mBAiBI,SAAAC,EAAoBC,GAAAC,KAAAD,OAAAA,SAIpBD,EAAAG,UAAAC,IAAA,SAAOC,EAAaC,EAA0BC,EAA4BC,OAClEC,EAAeP,KAAKD,OAAOG,IAAOC,EAAgB,MAAXG,EAAkB,CAAEE,QAASF,EAAQE,QAASC,QAAS,YAAe,CAACA,QAAS,aA2B3H,OAzBe,MAAXL,GACAG,EACKG,UAAU,SAAAC,GACP,GAAIA,EAAEC,GAAI,KACFF,EAA0B,IAAId,EAClCc,EAAUE,GAAKD,EAAEC,GACjBF,EAAUG,OAASF,EAAEE,OACrBH,EAAUI,WAAaH,EAAEG,WACzBJ,EAAUK,KAAOJ,EAAEI,KACnBL,EAAUF,QAAUG,EAAEH,QAEtBJ,EAAQM,KAEb,SAAAM,OACKN,EAA4B,IAAIb,EACpCa,EAAUE,IAAK,EACfF,EAAUF,QAAUQ,EAAMR,QAC1BE,EAAUO,QAAUD,EAAMC,QAC1BP,EAAUG,OAASG,EAAMH,OACzBH,EAAUI,WAAaE,EAAMF,WAE7BT,EAAQK,KAIbH,uBArCdW,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAvDLC,EAAAA,8ICDTC,EAAA,WAMA,SAAAA,KAImC,2BAJlCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CAAEC,EAAAA,kBACXC,UAAW,CAAE5B,OAEoBwB,EAVnC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface IObservableBase {\n    \n}\n\nexport interface IObservable<T> extends IObservableBase {\n    (subscribe: ISubscribe<T>) : void;    \n}\n\nexport interface IObservableError extends IObservableBase {\n    (error: ISubscribeError) : void;\n}\n\nexport interface ISubscribeBase {\n    ok: boolean;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;    \n}\n\nexport interface ISubscribe<T> extends ISubscribeBase {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n}\n\nexport class Subscribe<T> implements ISubscribe<T> {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeError extends ISubscribeBase {\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport class SubscribeError implements ISubscribeError {\n    ok: boolean;\n    headers: HttpHeaders;\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport interface IHttpClientExtended {\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientExt implements IHttpClientExtended {\n\n    constructor(private client: HttpClient)\n    {\n    }\n\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>> {                \n        let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n        if (success != null) {\n            httpResponse\n                .subscribe(x => {\n                    if (x.ok) {\n                        let subscribe: Subscribe<T> = new Subscribe<T>();\n                        subscribe.ok = x.ok;\n                        subscribe.status = x.status;\n                        subscribe.statusText = x.statusText;\n                        subscribe.body = x.body;                        \n                        subscribe.headers = x.headers;\n                                \n                        success(subscribe);                            \n                    }                        \n                }, error => {\n                    let subscribe: SubscribeError = new SubscribeError();\n                    subscribe.ok = false;\n                    subscribe.headers = error.headers;\n                    subscribe.message = error.message;\n                    subscribe.status = error.status;\n                    subscribe.statusText = error.statusText;\n\n                    failure(subscribe);\n                });\n        }        \n\n        return httpResponse;                   \n    }\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}