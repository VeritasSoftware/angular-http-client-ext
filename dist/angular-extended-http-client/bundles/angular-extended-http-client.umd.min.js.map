{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["SubscribeBase","Subscribe","SubscribeError","SubscribeCustomError","IObservableError","IObservableHttpError","IObservableHttpCustomError","HttpClientExt","client","this","prototype","get","url","success","failureType","failure","options","_this","httpResponse","headers","observe","subscribe","x","processSuccessResponse","error","processErrorResponse","getUsingHttpResponse","processSuccessHttpResponse","getUsingHttpCustomResponse","processSuccessHttpCustomResponse","post","model","postUsingHttpResponse","postUsingHttpCustomResponse","response","ok","body","status","statusText","errorType","ErrorType","observableHttpError","subscribe1","message","observableHttpCustomError","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the model from the body of the API response\r\n*/\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response.\r\n*/\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n  (subscribe: ISubscribeBase) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response and the model from the body of the API response\r\n*/\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\n/* \r\nFailure callback - returns the API thrown custom exception\r\n*/\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response through interface ISubscribeError\r\n*/\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n  (error: ISubscribeError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response and the API throw custom exception through interface ISubscribeCustomError<TError>\r\n*/\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class SubscribeBase implements ISubscribeBase {\r\n  ok: boolean;\r\n  headers: HttpHeaders;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableHttpError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n    get<T>(url: string, success?: IObservable<T>, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n    getUsingHttpResponse<T>(url: string, \r\n                              success?: IObservableHttpResponse, \r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n    getUsingHttpCustomResponse<T>(url: string, \r\n                                    success?: IObservableHttpCustomResponse<T>, \r\n                                    failureType?: ErrorType, \r\n                                    failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n    post<TRequest, TResponse>(url: string, model: TRequest, \r\n                                success?: IObservable<TResponse>, \r\n                                failureType?: ErrorType,\r\n                                failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n\r\n    postUsingHttpResponse<TRequest, TResponse>(url: string, model: TRequest, \r\n                                                  success?: IObservableHttpResponse, \r\n                                                  failureType?: ErrorType,\r\n                                                  failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n                                                  \r\n    postUsingHttpCustomResponse<TRequest, TResponse>(url: string, model: TRequest, \r\n                                                      success?: IObservableHttpCustomResponse<TResponse>, \r\n                                                      failureType?: ErrorType,\r\n                                                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;                                                  \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<T>(url: string, success?: IObservable<T>, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  getUsingHttpResponse<T>(url: string, \r\n                            success?: IObservableHttpResponse, \r\n                            failureType?: ErrorType,\r\n                            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessHttpResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  getUsingHttpCustomResponse<T>(url: string, \r\n                            success?: IObservableHttpCustomResponse<T>, \r\n                            failureType?: ErrorType,\r\n                            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessHttpCustomResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest, \r\n                              success?: IObservable<TResponse>,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  postUsingHttpResponse<TRequest, TResponse>(url: string, model: TRequest, \r\n                                                      success?: IObservableHttpResponse,\r\n                                                      failureType?: ErrorType, \r\n                                                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessHttpResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  postUsingHttpCustomResponse<TRequest, TResponse>(url: string, model: TRequest, \r\n                                                      success?: IObservableHttpCustomResponse<TResponse>,\r\n                                                      failureType?: ErrorType, \r\n                                                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessHttpCustomResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  private processSuccessResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservable<TResponse>) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        success(response!.body);\r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processSuccessHttpResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpResponse) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        let subscribe: ISubscribeBase = new SubscribeBase();\r\n        subscribe.ok = response.ok;\r\n        subscribe.status = response.status;\r\n        subscribe.statusText = response.statusText;\r\n        subscribe.headers = response.headers;\r\n                \r\n        success(subscribe);                            \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processSuccessHttpCustomResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpCustomResponse<TResponse>) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        let subscribe: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n        subscribe.ok = response.ok;\r\n        subscribe.status = response.status;\r\n        subscribe.statusText = response.statusText;\r\n        subscribe.body = response.body;                        \r\n        subscribe.headers = response.headers;\r\n                \r\n        success(subscribe);                            \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure: IObservableErrorBase, errorType: ErrorType) : void {\r\n\r\n    switch(errorType)\r\n    {\r\n      case ErrorType.IObservableError:\r\n        let observableError = <IObservableError<TError>> failure;\r\n        observableError(error!.error);        \r\n        break;\r\n      case ErrorType.IObservableHttpError:\r\n        let observableHttpError = <IObservableHttpError> failure;\r\n        let subscribe1: SubscribeError = new SubscribeError();\r\n        subscribe1.ok = false;\r\n        subscribe1.headers = error.headers;\r\n        subscribe1.message = error.message;\r\n        subscribe1.status = error.status;\r\n        subscribe1.statusText = error.statusText;\r\n\r\n        observableHttpError(subscribe1);\r\n        break;\r\n      case ErrorType.IObservableHttpCustomError:\r\n        let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n        let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n        subscribe.ok = false;\r\n        if (error.error) {\r\n          subscribe.error = error.error;\r\n        }        \r\n        subscribe.headers = error.headers;\r\n        subscribe.message = error.message;\r\n        subscribe.status = error.status;\r\n        subscribe.statusText = error.statusText;\r\n\r\n        observableHttpCustomError(subscribe);\r\n        break;\r\n      default:        \r\n        break;\r\n    }\r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}