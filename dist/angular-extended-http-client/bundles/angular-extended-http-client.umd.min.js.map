{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["Subscribe","SubscribeError","HttpClientExt","client","this","prototype","get","url","success","failure","options","_this","httpResponse","headers","observe","subscribe","x","processSuccessResponse","error","processErrorResponse","post","model","response","ok","status","statusText","body","message","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"gXA6BA,MAAA,SAAAA,QAcA,SAAAC,mBAqBI,SAAAC,EAAoBC,GAAAC,KAAAD,OAAAA,SAIpBD,EAAAG,UAAAC,IAAA,SAAOC,EAAaC,EAA0BC,EAA4BC,GAA1E,IAAAC,EAAAP,KACQQ,EAAeR,KAAKD,OAAOG,IAAOC,EAAgB,MAAXG,EAAkB,CAAEG,QAASH,EAAQG,QAASC,QAAS,YAAe,CAACA,QAAS,aAO3H,OALe,MAAXN,GACAI,EACKG,UAAU,SAAAC,GAAK,OAAAL,EAAKM,uBAAuBD,EAAER,IAAU,SAAAU,GAAS,OAAAP,EAAKQ,qBAAqBD,EAAOT,KAGnGG,GAGXV,EAAAG,UAAAe,KAAA,SAA0Bb,EAAac,EACXb,EACAC,EAA4BC,GAFxD,IAAAC,EAAAP,KAGMQ,EAAeR,KAAKD,OAAOiB,KAAgBb,EAAKc,EAAkB,MAAXX,EACC,CAAEG,QAASH,EAAQG,QAASC,QAAS,YACnC,CAACA,QAAS,aAMxE,OALe,MAAXN,GACAI,EACKG,UAAU,SAAAC,GAAK,OAAAL,EAAKM,uBAAuBD,EAAER,IAAU,SAAAU,GAAS,OAAAP,EAAKQ,qBAAqBD,EAAOT,KAGnGG,GAGHV,EAAAG,UAAAY,uBAAR,SAA0CK,EAAmCd,GAE3E,GAAe,MAAXA,GACEc,EAASC,GAAI,KACXR,EAAkC,IAAIf,EAC1Ce,EAAUQ,GAAKD,EAASC,GACxBR,EAAUS,OAASF,EAASE,OAC5BT,EAAUU,WAAaH,EAASG,WAChCV,EAAUW,KAAOJ,EAASI,KAC1BX,EAAUF,QAAUS,EAAST,QAE7BL,EAAQO,KAKNb,EAAAG,UAAAc,qBAAR,SAA6BD,EAAYT,GAEvC,GAAe,MAAXA,EAAiB,KACfM,EAA4B,IAAId,EACpCc,EAAUQ,IAAK,EACfR,EAAUF,QAAUK,EAAML,QAC1BE,EAAUY,QAAUT,EAAMS,QAC1BZ,EAAUS,OAASN,EAAMM,OACzBT,EAAUU,WAAaP,EAAMO,WAE7BhB,EAAQM,yBA5Dba,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDA3DLC,EAAAA,8ICDTC,EAAA,WAMA,SAAAA,KAImC,2BAJlCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CAAEC,EAAAA,kBACXC,UAAW,CAAElC,OAEoB8B,EAVnC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface IObservableBase {\n    \n}\n\nexport interface IObservable<T> extends IObservableBase {\n    (subscribe: ISubscribe<T>) : void;    \n}\n\nexport interface IObservableError extends IObservableBase {\n    (error: ISubscribeError) : void;\n}\n\nexport interface ISubscribeBase {\n    ok: boolean;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;    \n}\n\nexport interface ISubscribe<T> extends ISubscribeBase {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n}\n\nexport class Subscribe<T> implements ISubscribe<T> {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeError extends ISubscribeBase {\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport class SubscribeError implements ISubscribeError {\n    ok: boolean;\n    headers: HttpHeaders;\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport interface IHttpClientExtended {\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>>;\n\n    post<TRequest, TResponse>(url: string, model: TRequest, \n                              success?: IObservable<TResponse>, \n                              failure?: IObservableError, options?: any) : Observable<HttpResponse<TResponse>>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientExt implements IHttpClientExtended {\n\n    constructor(private client: HttpClient)\n    {\n    }\n\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>> {                \n        let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n        if (success != null) {\n            httpResponse\n                .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure));\n        }        \n\n        return httpResponse;                   \n    }\n\n    post<TRequest, TResponse>(url: string, model: TRequest, \n                                success?: IObservable<TResponse>, \n                                failure?: IObservableError, options?: any) : Observable<HttpResponse<TResponse>> {                \n      let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                  { headers: options.headers, observe: 'response' } \n                                                                  : {observe: 'response'})\n      if (success != null) {\n          httpResponse\n              .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure));\n      }        \n\n      return httpResponse;                   \n  }    \n\n  private processSuccessResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservable<TResponse>) : void {\n\n    if (success != null) {\n      if (response.ok) {\n        let subscribe: Subscribe<TResponse> = new Subscribe<TResponse>();\n        subscribe.ok = response.ok;\n        subscribe.status = response.status;\n        subscribe.statusText = response.statusText;\n        subscribe.body = response.body;                        \n        subscribe.headers = response.headers;\n                \n        success(subscribe);                            \n      }                        \n    }      \n  }\n\n  private processErrorResponse(error: any, failure: IObservableError) : void {\n\n    if (failure != null) {\n      let subscribe: SubscribeError = new SubscribeError();\n      subscribe.ok = false;\n      subscribe.headers = error.headers;\n      subscribe.message = error.message;\n      subscribe.status = error.status;\n      subscribe.statusText = error.statusText;\n\n      failure(subscribe);\n    }      \n  }  \n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}