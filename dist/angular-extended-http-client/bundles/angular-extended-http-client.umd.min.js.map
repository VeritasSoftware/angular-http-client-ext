{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["SubscribeBase","Subscribe","SubscribeError","SubscribeCustomError","IObservable","IObservableHttpResponse","IObservableHttpCustomResponse","IObservableError","IObservableHttpError","IObservableHttpCustomError","HttpClientExt","client","this","prototype","get","url","responseType","success","failureType","failure","options","_this","httpResponse","headers","observe","subscribe","x","processSuccessResponse","error","processErrorResponse","pipe","post","model","put","delete","response","ok","ResponseType","body","iObservableHttpResponse","subscribe1","status","statusText","iObservableHttpCustomResponse","subscribe2","errorType","ErrorType","observableHttpError","message","observableHttpCustomError","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the model from the body of the API response\r\n*/\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response.\r\n*/\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n  (subscribe: ISubscribeBase) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response and the model from the body of the API response\r\n*/\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\n/* \r\nFailure callback - returns the API thrown custom exception\r\n*/\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response through interface ISubscribeError\r\n*/\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n  (error: ISubscribeError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response and the API throw custom exception through interface ISubscribeCustomError<TError>\r\n*/\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class SubscribeBase implements ISubscribeBase {\r\n  ok: boolean;\r\n  headers: HttpHeaders;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ResponseType {\r\n  IObservable,\r\n  IObservableHttpResponse,\r\n  IObservableHttpCustomResponse\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableHttpError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest, \r\n                              responseType?: ResponseType,\r\n                              success?: IObservableBase, \r\n                              failureType?: ErrorType,\r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.get<TResponse>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse.pipe();                   \r\n  }\r\n\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest,\r\n                              responseType?: ResponseType, \r\n                              success?: IObservableBase,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.put<T>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n  \r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.delete<TResponse>(url, options != null ? \r\n                                                  { headers: options.headers, observe: 'response' } \r\n                                                  : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  private processSuccessResponse<TResponse>(responseType?: ResponseType, response?: HttpResponse<TResponse>, success?: IObservableBase) : void {\r\n\r\n    if (responseType != null && success != null) {\r\n      if (response.ok) {\r\n        switch(responseType) {        \r\n          case ResponseType.IObservable:\r\n            let iObservable = <IObservable<TResponse>>success;\r\n            iObservable(response!.body);\r\n            break;\r\n          case ResponseType.IObservableHttpResponse:\r\n            let iObservableHttpResponse = <IObservableHttpResponse>success;\r\n            let subscribe1: ISubscribeBase = new SubscribeBase();\r\n            subscribe1.ok = response.ok;\r\n            subscribe1.status = response.status;\r\n            subscribe1.statusText = response.statusText;\r\n            subscribe1.headers = response.headers;\r\n                    \r\n            iObservableHttpResponse(subscribe1);                            \r\n            break;\r\n          case ResponseType.IObservableHttpCustomResponse:\r\n            let iObservableHttpCustomResponse = <IObservableHttpCustomResponse<TResponse>>success;\r\n            let subscribe2: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n            subscribe2.ok = response.ok;\r\n            subscribe2.status = response.status;\r\n            subscribe2.statusText = response.statusText;\r\n            subscribe2.body = response.body;                        \r\n            subscribe2.headers = response.headers;\r\n                    \r\n            iObservableHttpCustomResponse(subscribe2);                            \r\n            break;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure?: IObservableErrorBase, errorType?: ErrorType) : void {\r\n\r\n    if (failure != null && errorType != null) {\r\n      switch(errorType)\r\n      {\r\n        case ErrorType.IObservableError:\r\n          let observableError = <IObservableError<TError>> failure;\r\n          observableError(error!.error);        \r\n          break;\r\n        case ErrorType.IObservableHttpError:\r\n          let observableHttpError = <IObservableHttpError> failure;\r\n          let subscribe1: SubscribeError = new SubscribeError();\r\n          subscribe1.ok = false;\r\n          subscribe1.headers = error.headers;\r\n          subscribe1.message = error.message;\r\n          subscribe1.status = error.status;\r\n          subscribe1.statusText = error.statusText;\r\n  \r\n          observableHttpError(subscribe1);\r\n          break;\r\n        case ErrorType.IObservableHttpCustomError:\r\n          let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n          let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n          subscribe.ok = false;\r\n          if (error.error) {\r\n            subscribe.error = error.error;\r\n          }        \r\n          subscribe.headers = error.headers;\r\n          subscribe.message = error.message;\r\n          subscribe.status = error.status;\r\n          subscribe.statusText = error.statusText;\r\n  \r\n          observableHttpCustomError(subscribe);\r\n          break;\r\n        default:        \r\n          break;\r\n      }\r\n    }    \r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}