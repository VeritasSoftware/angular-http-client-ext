{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["Subscribe","SubscribeError","SubscribeCustomError","HttpClientExt","client","this","prototype","get","url","success","failure","options","_this","httpResponse","headers","observe","subscribe","x","processSuccessResponse","error","processErrorResponse","getUsingCustomError","processCustomErrorResponse","getUsingHttpResponse","processSuccessHttpResponse","getUsingHttpCustomError","processHttpCustomError","post","model","postUsingHttpResponse","postUsingCustomError","postUsingHttpCustomError","response","ok","body","status","statusText","message","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface IObservableBase {\n    \n}\n\nexport interface IObservable<T> extends IObservableBase {\n    //(subscribe: ISubscribe<T>) : void;    \n    (subscribe: T) : void;    \n}\n\nexport interface IObservableHttpResponse<T> extends IObservableBase {\n  (subscribe: ISubscribe<T>) : void;    \n}\n\nexport interface IObservableError extends IObservableBase {\n    (error: ISubscribeError) : void;\n}\n\nexport interface IObservableCustomError<TError> extends IObservableBase {\n    (error: TError) : void;\n}\n\nexport interface IObservableHttpCustomError<TError> extends IObservableBase {\n  (error: ISubscribeCustomError<TError>) : void;\n}\n\nexport interface ISubscribeBase {\n    ok: boolean;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;    \n}\n\nexport interface ISubscribe<T> extends ISubscribeBase {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n}\n\nexport class Subscribe<T> implements ISubscribe<T> {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeError extends ISubscribeBase {\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\n  error: TError;\n  message: string;\n  status: number;\n  statusText: string;\n}\n\nexport class SubscribeError implements ISubscribeError {\n    ok: boolean;\n    headers: HttpHeaders;\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\n  ok: boolean;\n  error: TError;\n  headers: HttpHeaders;\n  message: string;\n  status: number;\n  statusText: string;\n}\n\nexport interface IHttpClientExtended {\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>>;\n\n    getUsingHttpResponse<T>(url: string, success?: IObservableHttpResponse<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>>;\n\n    getUsingCustomError<T, TError>(url: string, success?: IObservable<T>, failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<T>>;\n\n    getUsingHttpCustomError<T, TError>(url: string, success?: IObservable<T>, failure?: IObservableHttpCustomError<TError>, options?: any) : Observable<HttpResponse<T>>;\n\n    post<TRequest, TResponse>(url: string, model: TRequest, \n                                success?: IObservable<TResponse>, \n                                failure?: IObservableError, options?: any) : Observable<HttpResponse<TResponse>>;\n\n    postUsingHttpResponse<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                        success?: IObservableHttpResponse<TResponse>, \n                                                        failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>>;                              \n\n    postUsingCustomError<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                        success?: IObservable<TResponse>, \n                                                        failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>>;                              \n\n    postUsingHttpCustomError<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                        success?: IObservable<TResponse>, \n                                                        failure?: IObservableHttpCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>>;                                                        \n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientExt implements IHttpClientExtended {\n\n  constructor(private client: HttpClient)\n  {\n  }\n\n  get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>> {                \n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure));\n    }        \n\n    return httpResponse;                   \n  }  \n\n  getUsingCustomError<T, TError>(url: string, success?: IObservable<T>, failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<T>> {\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n      if (success != null) {\n          httpResponse\n              .subscribe(x => this.processSuccessResponse(x,success), error => this.processCustomErrorResponse(<TError>error, failure));\n      }        \n\n      return httpResponse;                   \n  }\n\n  getUsingHttpResponse<T>(url: string, success?: IObservableHttpResponse<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>> {                \n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessHttpResponse(x,success), error => this.processErrorResponse(error, failure));\n    }        \n\n    return httpResponse;                   \n  }\n\n\n  getUsingHttpCustomError<T, TError>(url: string, success?: IObservable<T>, failure?: IObservableHttpCustomError<TError>, options?: any) : Observable<HttpResponse<T>> {\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n      if (success != null) {\n          httpResponse\n              .subscribe(x => this.processSuccessResponse(x,success), error => this.processHttpCustomError(<TError>error, failure));\n      }        \n\n      return httpResponse;                   \n  }  \n\n\n  post<TRequest, TResponse>(url: string, model: TRequest, \n                              success?: IObservable<TResponse>, \n                              failure?: IObservableError, options?: any) : Observable<HttpResponse<TResponse>> {                \n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                { headers: options.headers, observe: 'response' } \n                                                                : {observe: 'response'})\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure));\n    }        \n\n    return httpResponse;                   \n  }\n\n  postUsingHttpResponse<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                      success?: IObservableHttpResponse<TResponse>, \n                                                      failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>> {                \n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                { headers: options.headers, observe: 'response' } \n                                                                : {observe: 'response'})\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessHttpResponse(x,success), error => this.processCustomErrorResponse(<TError>error, failure));\n    }        \n\n    return httpResponse;                   \n  }\n\n  postUsingCustomError<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                      success?: IObservable<TResponse>, \n                                                      failure?: IObservableCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>> {                \n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                { headers: options.headers, observe: 'response' } \n                                                                : {observe: 'response'})\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processCustomErrorResponse(<TError>error, failure));\n    }        \n\n    return httpResponse;                   \n  }\n  \n  postUsingHttpCustomError<TRequest, TResponse, TError>(url: string, model: TRequest, \n                                                      success?: IObservable<TResponse>, \n                                                      failure?: IObservableHttpCustomError<TError>, options?: any) : Observable<HttpResponse<TResponse>> {                \n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \n                                                                { headers: options.headers, observe: 'response' } \n                                                                : {observe: 'response'})\n    if (success != null) {\n        httpResponse\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processHttpCustomError(<TError>error, failure));\n    }        \n\n    return httpResponse;                   \n  }  \n\n  private processSuccessResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservable<TResponse>) : void {\n\n    if (success != null) {\n      if (response.ok) {\n        success(response!.body);\n      }                        \n    }      \n  }\n\n  private processSuccessHttpResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpResponse<TResponse>) : void {\n\n    if (success != null) {\n      if (response.ok) {\n        let subscribe: Subscribe<TResponse> = new Subscribe<TResponse>();\n        subscribe.ok = response.ok;\n        subscribe.status = response.status;\n        subscribe.statusText = response.statusText;\n        subscribe.body = response.body;                        \n        subscribe.headers = response.headers;\n                \n        success(subscribe);                            \n      }                        \n    }      \n  }\n\n  private processErrorResponse(error: any, failure: IObservableError) : void {\n\n    if (failure != null) {\n      let subscribe: SubscribeError = new SubscribeError();\n      subscribe.ok = false;\n      subscribe.headers = error.headers;\n      subscribe.message = error.message;\n      subscribe.status = error.status;\n      subscribe.statusText = error.statusText;\n\n      failure(subscribe);\n    }      \n  }\n\n  private processCustomErrorResponse<TError>(error: any, failure: IObservableCustomError<TError>) : void {\n\n    if (failure != null) {      \n      failure(error!.error);\n    }      \n  } \n\n  private processHttpCustomError<TError>(error: any, failure: IObservableHttpCustomError<TError>) : void {\n\n    if (failure != null) {\n      let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\n      subscribe.ok = false;\n      if (error.error) {\n        subscribe.error = error.error;\n      }        \n      subscribe.headers = error.headers;\n      subscribe.message = error.message;\n      subscribe.status = error.status;\n      subscribe.statusText = error.statusText;\n\n      failure(subscribe);\n    }      \n  }   \n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}