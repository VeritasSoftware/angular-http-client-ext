{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["SubscribeBase","Subscribe","SubscribeError","SubscribeCustomError","IObservable","IObservableHttpResponse","IObservableHttpCustomResponse","IObservableError","IObservableHttpError","IObservableHttpCustomError","HttpClientExt","client","this","prototype","get","url","responseType","success","failureType","failure","options","pipe","_this","httpResponse","headers","observe","retry","subscribe","x","processSuccessResponse","error","processErrorResponse","post","model","put","patch","delete","response","ok","ResponseType","body","iObservableHttpResponse","subscribe1","status","statusText","iObservableHttpCustomResponse","subscribe2","errorType","ErrorType","observableHttpError","message","observableHttpCustomError","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"8aAAA,IAAAA,EAoEA,SAAAA,QAOA,SAAAC,QAqBA,SAAAC,QAQA,SAAAC,SAUEC,YAAA,EACAC,wBAAA,EACAC,8BAAA,mKAIAC,iBAAA,EACAC,qBAAA,EACAC,2BAAA,2KA8CA,SAAAC,EAAoBC,GAAAC,KAAAD,OAAAA,SAIpBD,EAAAG,UAAAC,IAAA,SAAeC,EACCC,EACAC,EACAC,EACAC,EAAgCC,EAChCC,GALhB,IAAAC,EAAAV,KAMMW,EAAeX,KAAKD,OAAOG,IAAeC,EAAgB,MAAXK,EAAkB,CAAEI,QAASJ,EAAQI,QAASC,QAAS,YAAe,CAACA,QAAS,aAanI,OAXoB,MAAhBT,GAAmC,MAAXC,IACZ,MAARI,IACFE,EAAeA,EAAaF,KAAKA,IAEpB,MAAXD,GAAoC,MAAjBA,EAAQM,OAAiC,EAAhBN,EAAQM,QACtDH,EAAeA,EAAaF,KAAKK,EAAAA,MAAMN,EAAQM,SAEjDH,EACKI,UAAU,SAAAC,GAAK,OAAAN,EAAKO,uBAAuBb,EAAcY,EAAGX,IAAU,SAAAa,GAAS,OAAAR,EAAKS,qBAAqBD,EAAOX,EAASD,MAG3HK,GAITb,EAAAG,UAAAmB,KAAA,SAA0BjB,EAAakB,EACXjB,EACAC,EACAC,EACAC,EAAgCC,EAChCC,GAL5B,IAAAC,EAAAV,KAMMW,EAAeX,KAAKD,OAAOqB,KAAgBjB,EAAKkB,EAAkB,MAAXb,EACC,CAAEI,QAASJ,EAAQI,QAASC,QAAS,YACnC,CAACA,QAAS,aAYxE,OAXoB,MAAhBT,GAAmC,MAAXC,IACZ,MAARI,IACFE,EAAeA,EAAaF,KAAKA,IAEpB,MAAXD,GAAoC,MAAjBA,EAAQM,OAAiC,EAAhBN,EAAQM,QACtDH,EAAeA,EAAaF,KAAKK,EAAAA,MAAMN,EAAQM,SAEjDH,EACKI,UAAU,SAAAC,GAAK,OAAAN,EAAKO,uBAAuBb,EAAcY,EAAGX,IAAU,SAAAa,GAAS,OAAAR,EAAKS,qBAAqBD,EAAOX,EAASD,MAG3HK,GAGTb,EAAAG,UAAAqB,IAAA,SAAOnB,EAAakB,EACVjB,EACAC,EACAC,EACAC,EAAgCC,EAChCC,GALV,IAAAC,EAAAV,KAMMW,EAAeX,KAAKD,OAAOuB,IAAOnB,EAAKkB,EAAkB,MAAXb,EACU,CAAEI,QAASJ,EAAQI,QAASC,QAAS,YACnC,CAACA,QAAS,aAYxE,OAXoB,MAAhBT,GAAmC,MAAXC,IACZ,MAARI,IACFE,EAAeA,EAAaF,KAAKA,IAEpB,MAAXD,GAAoC,MAAjBA,EAAQM,OAAiC,EAAhBN,EAAQM,QACtDH,EAAeA,EAAaF,KAAKK,EAAAA,MAAMN,EAAQM,SAEjDH,EACKI,UAAU,SAAAC,GAAK,OAAAN,EAAKO,uBAAuBb,EAAcY,EAAGX,IAAU,SAAAa,GAAS,OAAAR,EAAKS,qBAAqBD,EAAOX,EAASD,MAG3HK,GAGTb,EAAAG,UAAAsB,MAAA,SAASpB,EAAakB,EACZjB,EACAC,EACAC,EACAC,EAAgCC,EAChCC,GALV,IAAAC,EAAAV,KAMMW,EAAeX,KAAKD,OAAOwB,MAASpB,EAAKkB,EAAkB,MAAXb,EACQ,CAAEI,QAASJ,EAAQI,QAASC,QAAS,YACnC,CAACA,QAAS,aAYxE,OAXoB,MAAhBT,GAAmC,MAAXC,IACZ,MAARI,IACFE,EAAeA,EAAaF,KAAKA,IAEpB,MAAXD,GAAoC,MAAjBA,EAAQM,OAAiC,EAAhBN,EAAQM,QACtDH,EAAeA,EAAaF,KAAKK,EAAAA,MAAMN,EAAQM,SAEjDH,EACKI,UAAU,SAAAC,GAAK,OAAAN,EAAKO,uBAAuBb,EAAcY,EAAGX,IAAU,SAAAa,GAAS,OAAAR,EAAKS,qBAAqBD,EAAOX,EAASD,MAG3HK,GAGTb,EAAAG,UAAAuB,UAAA,SAAkBrB,EACEC,EACAC,EACAC,EACAC,EAAgCC,EAChCC,GALpB,IAAAC,EAAAV,KAMMW,EAAeX,KAAKD,OAAOyB,UAAkBrB,EAAgB,MAAXK,EACR,CAAEI,QAASJ,EAAQI,QAASC,QAAS,YACnC,CAACA,QAAS,aAY1D,OAXoB,MAAhBT,GAAmC,MAAXC,IACZ,MAARI,IACFE,EAAeA,EAAaF,KAAKA,IAEpB,MAAXD,GAAoC,MAAjBA,EAAQM,OAAiC,EAAhBN,EAAQM,QACtDH,EAAeA,EAAaF,KAAKK,EAAAA,MAAMN,EAAQM,SAEjDH,EACKI,UAAU,SAAAC,GAAK,OAAAN,EAAKO,uBAAuBb,EAAcY,EAAGX,IAAU,SAAAa,GAAS,OAAAR,EAAKS,qBAAqBD,EAAOX,EAASD,MAG3HK,GAGDb,EAAAG,UAAAgB,uBAAR,SAA0Cb,EAA6BqB,EAAoCpB,GAEzG,GAAoB,MAAhBD,GAAmC,MAAXC,GACtBoB,EAASC,GACX,OAAOtB,GACL,KAAKuB,EAAanC,YACD,EACH,EAAUoC,MACtB,MACF,KAAKD,EAAalC,4BACZoC,EAAuB,EACvBC,EAA6B,IAAI1C,EACrC0C,EAAWJ,GAAKD,EAASC,GACzBI,EAAWC,OAASN,EAASM,OAC7BD,EAAWE,WAAaP,EAASO,WACjCF,EAAWlB,QAAUa,EAASb,QAE9BiB,EAAwBC,GACxB,MACF,KAAKH,EAAajC,kCACZuC,EAA6B,EAC7BC,EAAoC,IAAI7C,EAC5C6C,EAAWR,GAAKD,EAASC,GACzBQ,EAAWH,OAASN,EAASM,OAC7BG,EAAWF,WAAaP,EAASO,WACjCE,EAAWN,KAAOH,EAASG,KAC3BM,EAAWtB,QAAUa,EAASb,QAE9BqB,EAA8BC,KAOhCpC,EAAAG,UAAAkB,qBAAR,SAAqCD,EAAYX,EAAgC4B,GAE/E,GAAe,MAAX5B,GAAgC,MAAb4B,EACrB,OAAOA,GAEL,KAAKC,EAAUzC,iBACM,EACH,EAAOuB,OACvB,MACF,KAAKkB,EAAUxC,yBACTyC,EAAmB,EACnBP,EAA6B,IAAIxC,EACrCwC,EAAWJ,IAAK,EAChBI,EAAWlB,QAAUM,EAAMN,QAC3BkB,EAAWQ,QAAUpB,EAAMoB,QAC3BR,EAAWC,OAASb,EAAMa,OAC1BD,EAAWE,WAAad,EAAMc,WAE9BK,EAAoBP,GACpB,MACF,KAAKM,EAAUvC,+BACT0C,EAAyB,EACzBxB,EAA0C,IAAIxB,EAClDwB,EAAUW,IAAK,EACXR,EAAMA,QACRH,EAAUG,MAAQA,EAAMA,OAE1BH,EAAUH,QAAUM,EAAMN,QAC1BG,EAAUuB,QAAUpB,EAAMoB,QAC1BvB,EAAUgB,OAASb,EAAMa,OACzBhB,EAAUiB,WAAad,EAAMc,WAE7BO,EAA0BxB,yBA/LnCyB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAnKLC,EAAAA,8ICDTC,EAAA,WAMA,SAAAA,KAImC,2BAJlCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CAAEC,EAAAA,kBACXC,UAAW,CAAElD,OAEoB8C,EAVnC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { retry } from 'rxjs/operators';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the model from the body of the API response\r\n*/\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response.\r\n*/\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n  (subscribe: ISubscribeBase) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response and the model from the body of the API response\r\n*/\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\n/* \r\nFailure callback - returns the API thrown custom exception\r\n*/\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response through interface ISubscribeError\r\n*/\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n  (error: ISubscribeError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response and the API throw custom exception through interface ISubscribeCustomError<TError>\r\n*/\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class SubscribeBase implements ISubscribeBase {\r\n  ok: boolean;\r\n  headers: HttpHeaders;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ResponseType {\r\n  IObservable,\r\n  IObservableHttpResponse,\r\n  IObservableHttpCustomResponse\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableHttpError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any, \r\n                  pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>>;\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest, \r\n                              responseType?: ResponseType,\r\n                              success?: IObservableBase, \r\n                              failureType?: ErrorType,\r\n                              failure?: IObservableErrorBase, options?: any, \r\n                              pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>>;\r\n\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>>;\r\n\r\n  patch<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>>;            \r\n\r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any, \r\n                      pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any, \r\n                  pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.get<TResponse>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;\r\n  }\r\n\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest,\r\n                              responseType?: ResponseType, \r\n                              success?: IObservableBase,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any, \r\n                              pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.put<T>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  patch<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.patch<T>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any, \r\n                      pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.delete<TResponse>(url, options != null ? \r\n                                                  { headers: options.headers, observe: 'response' } \r\n                                                  : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }        \r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  private processSuccessResponse<TResponse>(responseType?: ResponseType, response?: HttpResponse<TResponse>, success?: IObservableBase) : void {\r\n\r\n    if (responseType != null && success != null) {\r\n      if (response.ok) {\r\n        switch(responseType) {        \r\n          case ResponseType.IObservable:\r\n            let iObservable = <IObservable<TResponse>>success;\r\n            iObservable(response!.body);\r\n            break;\r\n          case ResponseType.IObservableHttpResponse:\r\n            let iObservableHttpResponse = <IObservableHttpResponse>success;\r\n            let subscribe1: ISubscribeBase = new SubscribeBase();\r\n            subscribe1.ok = response.ok;\r\n            subscribe1.status = response.status;\r\n            subscribe1.statusText = response.statusText;\r\n            subscribe1.headers = response.headers;\r\n                    \r\n            iObservableHttpResponse(subscribe1);                            \r\n            break;\r\n          case ResponseType.IObservableHttpCustomResponse:\r\n            let iObservableHttpCustomResponse = <IObservableHttpCustomResponse<TResponse>>success;\r\n            let subscribe2: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n            subscribe2.ok = response.ok;\r\n            subscribe2.status = response.status;\r\n            subscribe2.statusText = response.statusText;\r\n            subscribe2.body = response.body;                        \r\n            subscribe2.headers = response.headers;\r\n                    \r\n            iObservableHttpCustomResponse(subscribe2);                            \r\n            break;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure?: IObservableErrorBase, errorType?: ErrorType) : void {\r\n\r\n    if (failure != null && errorType != null) {\r\n      switch(errorType)\r\n      {\r\n        case ErrorType.IObservableError:\r\n          let observableError = <IObservableError<TError>> failure;\r\n          observableError(error!.error);        \r\n          break;\r\n        case ErrorType.IObservableHttpError:\r\n          let observableHttpError = <IObservableHttpError> failure;\r\n          let subscribe1: SubscribeError = new SubscribeError();\r\n          subscribe1.ok = false;\r\n          subscribe1.headers = error.headers;\r\n          subscribe1.message = error.message;\r\n          subscribe1.status = error.status;\r\n          subscribe1.statusText = error.statusText;\r\n  \r\n          observableHttpError(subscribe1);\r\n          break;\r\n        case ErrorType.IObservableHttpCustomError:\r\n          let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n          let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n          subscribe.ok = false;\r\n          if (error.error) {\r\n            subscribe.error = error.error;\r\n          }        \r\n          subscribe.headers = error.headers;\r\n          subscribe.message = error.message;\r\n          subscribe.status = error.status;\r\n          subscribe.statusText = error.statusText;\r\n  \r\n          observableHttpCustomError(subscribe);\r\n          break;\r\n        default:        \r\n          break;\r\n      }\r\n    }    \r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}