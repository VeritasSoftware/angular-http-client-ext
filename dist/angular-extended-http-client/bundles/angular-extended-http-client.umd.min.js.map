{"version":3,"sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":["Subscribe","SubscribeError","SubscribeCustomError","IObservableError","IObservableCustomError","IObservableHttpCustomError","HttpClientExt","client","this","prototype","get","url","success","failureType","failure","options","_this","httpResponse","headers","observe","subscribe","x","processSuccessResponse","error","processErrorResponse","getUsingHttpResponse","processSuccessHttpResponse","post","model","postUsingHttpResponse","response","ok","body","status","statusText","errorType","ErrorType","observableError","subscribe1","message","observableHttpCustomError","Injectable","args","providedIn","HttpClient","HttpClientExtModule","NgModule","imports","HttpClientModule","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\nexport interface IObservableHttpResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\nexport interface IObservableError extends IObservableErrorBase {\r\n    (error: ISubscribeError) : void;\r\n}\r\n\r\nexport interface IObservableCustomError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableCustomError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n    get<T>(url: string, success?: IObservable<T>, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n    getUsingHttpResponse<T>(url: string, \r\n                              success?: IObservableHttpResponse<T>, \r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n    post<TRequest, TResponse>(url: string, model: TRequest, \r\n                                success?: IObservable<TResponse>, \r\n                                failureType?: ErrorType,\r\n                                failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n\r\n    postUsingHttpResponse<TRequest, TResponse>(url: string, model: TRequest, \r\n                                                        success?: IObservableHttpResponse<TResponse>, \r\n                                                        failureType?: ErrorType,\r\n                                                        failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;                              \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<T>(url: string, success?: IObservable<T>, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  getUsingHttpResponse<T>(url: string, \r\n                            success?: IObservableHttpResponse<T>, \r\n                            failureType?: ErrorType,\r\n                            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessHttpResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest, \r\n                              success?: IObservable<TResponse>,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  postUsingHttpResponse<TRequest, TResponse>(url: string, model: TRequest, \r\n                                                      success?: IObservableHttpResponse<TResponse>,\r\n                                                      failureType?: ErrorType, \r\n                                                      failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessHttpResponse(x,success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  private processSuccessResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservable<TResponse>) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        success(response!.body);\r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processSuccessHttpResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpResponse<TResponse>) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        let subscribe: Subscribe<TResponse> = new Subscribe<TResponse>();\r\n        subscribe.ok = response.ok;\r\n        subscribe.status = response.status;\r\n        subscribe.statusText = response.statusText;\r\n        subscribe.body = response.body;                        \r\n        subscribe.headers = response.headers;\r\n                \r\n        success(subscribe);                            \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure: IObservableErrorBase, errorType: ErrorType) : void {\r\n\r\n    switch(errorType)\r\n    {\r\n      case ErrorType.IObservableError:\r\n        let observableError = <IObservableError> failure;\r\n        let subscribe1: SubscribeError = new SubscribeError();\r\n        subscribe1.ok = false;\r\n        subscribe1.headers = error.headers;\r\n        subscribe1.message = error.message;\r\n        subscribe1.status = error.status;\r\n        subscribe1.statusText = error.statusText;\r\n\r\n        observableError(subscribe1);\r\n        break;\r\n      case ErrorType.IObservableCustomError:\r\n        let observableCustomError = <IObservableCustomError<TError>> failure;\r\n        observableCustomError(error!.error);\r\n        break;\r\n      case ErrorType.IObservableHttpCustomError:\r\n        let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n        let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n        subscribe.ok = false;\r\n        if (error.error) {\r\n          subscribe.error = error.error;\r\n        }        \r\n        subscribe.headers = error.headers;\r\n        subscribe.message = error.message;\r\n        subscribe.status = error.status;\r\n        subscribe.statusText = error.statusText;\r\n\r\n        observableHttpCustomError(subscribe);\r\n        break;\r\n      default:        \r\n        break;\r\n    }\r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}