{"version":3,"file":"angular-extended-http-client.umd.js.map","sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the model from the body of the API response\r\n*/\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response.\r\n*/\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n  (subscribe: ISubscribeBase) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response and the model from the body of the API response\r\n*/\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\n/* \r\nFailure callback - returns the API thrown custom exception\r\n*/\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response through interface ISubscribeError\r\n*/\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n  (error: ISubscribeError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response and the API throw custom exception through interface ISubscribeCustomError<TError>\r\n*/\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class SubscribeBase implements ISubscribeBase {\r\n  ok: boolean;\r\n  headers: HttpHeaders;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ResponseType {\r\n  IObservable,\r\n  IObservableHttpResponse,\r\n  IObservableHttpCustomResponse\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableHttpError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n    get<T>(url: string, \r\n            responseType: ResponseType,\r\n            success?: IObservableBase, \r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>>;\r\n\r\n    post<TRequest, TResponse>(url: string, model: TRequest, \r\n                                responseType: ResponseType,\r\n                                success?: IObservableBase, \r\n                                failureType?: ErrorType,\r\n                                failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<T>(url: string, \r\n            responseType: ResponseType,\r\n            success?: IObservableBase, \r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest,\r\n                              responseType: ResponseType, \r\n                              success?: IObservableBase,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (success != null) {\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  private processSuccessResponse<TResponse>(responseType: ResponseType, response: HttpResponse<TResponse>, success: IObservableBase) : void {\r\n\r\n    if (response.ok) {\r\n      switch(responseType) {        \r\n        case ResponseType.IObservable:\r\n          let iObservable = <IObservable<TResponse>>success;\r\n          iObservable(response!.body);\r\n          break;\r\n        case ResponseType.IObservableHttpResponse:\r\n          let iObservableHttpResponse = <IObservableHttpResponse>success;\r\n          let subscribe1: ISubscribeBase = new SubscribeBase();\r\n          subscribe1.ok = response.ok;\r\n          subscribe1.status = response.status;\r\n          subscribe1.statusText = response.statusText;\r\n          subscribe1.headers = response.headers;\r\n                  \r\n          iObservableHttpResponse(subscribe1);                            \r\n          break;\r\n        case ResponseType.IObservableHttpCustomResponse:\r\n          let iObservableHttpCustomResponse = <IObservableHttpCustomResponse<TResponse>>success;\r\n          let subscribe2: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n          subscribe2.ok = response.ok;\r\n          subscribe2.status = response.status;\r\n          subscribe2.statusText = response.statusText;\r\n          subscribe2.body = response.body;                        \r\n          subscribe2.headers = response.headers;\r\n                  \r\n          iObservableHttpCustomResponse(subscribe2);                            \r\n          break;\r\n      }\r\n    }    \r\n  }\r\n\r\n  private processSuccessHttpResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpResponse) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processSuccessHttpCustomResponse<TResponse>(response: HttpResponse<TResponse>, success: IObservableHttpCustomResponse<TResponse>) : void {\r\n\r\n    if (success != null) {\r\n      if (response.ok) {\r\n        let subscribe: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n        subscribe.ok = response.ok;\r\n        subscribe.status = response.status;\r\n        subscribe.statusText = response.statusText;\r\n        subscribe.body = response.body;                        \r\n        subscribe.headers = response.headers;\r\n                \r\n        success(subscribe);                            \r\n      }                        \r\n    }      \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure: IObservableErrorBase, errorType: ErrorType) : void {\r\n\r\n    switch(errorType)\r\n    {\r\n      case ErrorType.IObservableError:\r\n        let observableError = <IObservableError<TError>> failure;\r\n        observableError(error!.error);        \r\n        break;\r\n      case ErrorType.IObservableHttpError:\r\n        let observableHttpError = <IObservableHttpError> failure;\r\n        let subscribe1: SubscribeError = new SubscribeError();\r\n        subscribe1.ok = false;\r\n        subscribe1.headers = error.headers;\r\n        subscribe1.message = error.message;\r\n        subscribe1.status = error.status;\r\n        subscribe1.statusText = error.statusText;\r\n\r\n        observableHttpError(subscribe1);\r\n        break;\r\n      case ErrorType.IObservableHttpCustomError:\r\n        let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n        let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n        subscribe.ok = false;\r\n        if (error.error) {\r\n          subscribe.error = error.error;\r\n        }        \r\n        subscribe.headers = error.headers;\r\n        subscribe.message = error.message;\r\n        subscribe.status = error.status;\r\n        subscribe.statusText = error.statusText;\r\n\r\n        observableHttpCustomError(subscribe);\r\n        break;\r\n      default:        \r\n        break;\r\n    }\r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"],"names":["Injectable","HttpClient","NgModule","HttpClientModule"],"mappings":"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"}
