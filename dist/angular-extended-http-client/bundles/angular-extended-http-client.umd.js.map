{"version":3,"file":"angular-extended-http-client.umd.js.map","sources":["ng://angular-extended-http-client/lib/angular-extended-http-client.service.ts","ng://angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface IObservableBase {\n    \n}\n\nexport interface IObservable<T> extends IObservableBase {\n    (subscribe: ISubscribe<T>) : void;    \n}\n\nexport interface IObservableError extends IObservableBase {\n    (error: ISubscribeError) : void;\n}\n\nexport interface ISubscribeBase {\n    ok: boolean;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;    \n}\n\nexport interface ISubscribe<T> extends ISubscribeBase {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n}\n\nexport class Subscribe<T> implements ISubscribe<T> {\n    ok: boolean;\n    body: T;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface ISubscribeError extends ISubscribeBase {\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport class SubscribeError implements ISubscribeError {\n    ok: boolean;\n    headers: HttpHeaders;\n    message: string;\n    status: number;\n    statusText: string;\n}\n\nexport interface IHttpClientExtended {\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientExt implements IHttpClientExtended {\n\n    constructor(private client: HttpClient)\n    {\n    }\n\n    get<T>(url: string, success?: IObservable<T>, failure?: IObservableError, options?: any) : Observable<HttpResponse<T>> {                \n        let httpResponse = this.client.get<T>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'})\n\n        if (success != null) {\n            httpResponse\n                .subscribe(x => {\n                    if (x.ok) {\n                        let subscribe: Subscribe<T> = new Subscribe<T>();\n                        subscribe.ok = x.ok;\n                        subscribe.status = x.status;\n                        subscribe.statusText = x.statusText;\n                        subscribe.body = x.body;                        \n                        subscribe.headers = x.headers;\n                                \n                        success(subscribe);                            \n                    }                        \n                }, error => {\n                    let subscribe: SubscribeError = new SubscribeError();\n                    subscribe.ok = false;\n                    subscribe.headers = error.headers;\n                    subscribe.message = error.message;\n                    subscribe.status = error.status;\n                    subscribe.statusText = error.statusText;\n\n                    failure(subscribe);\n                });\n        }        \n\n        return httpResponse;                   \n    }\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"],"names":["Injectable","HttpClient","NgModule","HttpClientModule"],"mappings":";;;;;;;;;;AAAA;;;AA6BA;;;QAAA;SAMC;QAAD,gBAAC;IAAD,CAAC,IAAA;;QAQD;SAMC;QAAD,qBAAC;IAAD,CAAC,IAAA;;QAWG,uBAAoB,MAAkB;YAAlB,WAAM,GAAN,MAAM,CAAY;SAErC;;;;;;;;;QAED,2BAAG;;;;;;;;YAAH,UAAO,GAAW,EAAE,OAAwB,EAAE,OAA0B,EAAE,OAAa;;oBAC/E,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAI,GAAG,EAAE,OAAO,IAAI,IAAI,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC;gBAEvI,IAAI,OAAO,IAAI,IAAI,EAAE;oBACjB,YAAY;yBACP,SAAS,CAAC,UAAA,CAAC;wBACR,IAAI,CAAC,CAAC,EAAE,EAAE;;gCACF,SAAS,GAAiB,IAAI,SAAS,EAAK;4BAChD,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;4BACpB,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;4BAC5B,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;4BACpC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;4BACxB,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;4BAE9B,OAAO,CAAC,SAAS,CAAC,CAAC;yBACtB;qBACJ,EAAE,UAAA,KAAK;;4BACA,SAAS,GAAmB,IAAI,cAAc,EAAE;wBACpD,SAAS,CAAC,EAAE,GAAG,KAAK,CAAC;wBACrB,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;wBAClC,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;wBAClC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;wBAChC,SAAS,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;wBAExC,OAAO,CAAC,SAAS,CAAC,CAAC;qBACtB,CAAC,CAAC;iBACV;gBAED,OAAO,YAAY,CAAC;aACvB;;oBAtCJA,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAxDQC,aAAU;;;;4BADnB;KAuDA;;;;;;ACvDA;QAMA;SAIoC;;oBAJnCC,WAAQ,SAAC;wBACR,OAAO,EAAE,CAAEC,mBAAgB,CAAE;wBAC7B,SAAS,EAAE,CAAE,aAAa,CAAE;qBAC7B;;QACkC,0BAAC;KAJpC;;;;;;;;;;;;;;;;;;;;;;;;;"}
